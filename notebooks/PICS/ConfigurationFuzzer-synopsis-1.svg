<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.49.3 (20211023.0002)
 -->
<!-- Pages: 1 -->
<svg width="588pt" height="1034pt"
 viewBox="0.00 0.00 588.00 1034.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1030)">
<g id="a_graph0"><a xlink:title="OptionRunner class hierarchy">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1030 584,-1030 584,4 -4,4"/>
</a>
</g>
<!-- OptionRunner -->
<g id="node1" class="node">
<title>OptionRunner</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class OptionRunner:&#10;Run a program while determining its option grammar">
<polygon fill="none" stroke="black" points="1.5,-32 1.5,-162 114.5,-162 114.5,-32 1.5,-32"/>
<text text-anchor="start" x="14" y="-147.8" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">OptionRunner</text>
<polyline fill="none" stroke="black" points="1.5,-139 114.5,-139 "/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="OptionRunner">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, program: Union[str, List[str]], arguments: Optional[str] = None, *, miner_class: Optional[Type[OptionGrammarMiner]] = None):&#10;Constructor.&#10;`program` &#45; the (Python) program to be executed&#10;`arguments` &#45; an (optional) string with arguments for `program`&#10;`miner` &#45; the `OptionGrammarMiner` class to be used&#10;(default: `OptionGrammarMiner`)">
<text text-anchor="start" x="10" y="-127.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="ebnf_grammar(self):&#10;Return extracted grammar in EBNF form">
<text text-anchor="start" x="10" y="-116.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">ebnf_grammar()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="grammar(self):&#10;Return extracted grammar in BNF form">
<text text-anchor="start" x="10" y="-105.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">grammar()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="executable(self)">
<text text-anchor="start" x="10" y="-93.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">executable()</text>
</a>
</g>
<g id="a_node1_5"><a xlink:href="#" xlink:title="find_contents(self)">
<text text-anchor="start" x="10" y="-82.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">find_contents()</text>
</a>
</g>
<g id="a_node1_6"><a xlink:href="#" xlink:title="find_grammar(self)">
<text text-anchor="start" x="10" y="-71.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">find_grammar()</text>
</a>
</g>
<g id="a_node1_7"><a xlink:href="#" xlink:title="invoker(self)">
<text text-anchor="start" x="10" y="-60.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">invoker()</text>
</a>
</g>
<g id="a_node1_8"><a xlink:href="#" xlink:title="set_arguments(self, args)">
<text text-anchor="start" x="10" y="-49.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">set_arguments()</text>
</a>
</g>
<g id="a_node1_9"><a xlink:href="#" xlink:title="set_invocation(self, program)">
<text text-anchor="start" x="10" y="-38.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">set_invocation()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProgramRunner -->
<g id="node2" class="node">
<title>ProgramRunner</title>
<g id="a_node2"><a xlink:href="Fuzzer.ipynb" xlink:title="class ProgramRunner:&#10;Test a program with inputs.">
<polygon fill="none" stroke="black" points="0,-236 0,-300 116,-300 116,-236 0,-236"/>
<text text-anchor="start" x="8" y="-285.8" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProgramRunner</text>
<polyline fill="none" stroke="black" points="0,-277 116,-277 "/>
<g id="a_node2_10"><a xlink:href="#" xlink:title="ProgramRunner">
<g id="a_node2_11"><a xlink:href="Fuzzer.ipynb" xlink:title="__init__(self, program: Union[str, List[str]]) &#45;&gt; None:&#10;Initialize.&#10;`program` is a program spec as passed to `subprocess.run()`">
<text text-anchor="start" x="19" y="-265.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node2_12"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, inp: str = &#39;&#39;) &#45;&gt; Tuple[subprocess.CompletedProcess, str]:&#10;Run the program with `inp` as input.&#10;Return test outcome based on result of `subprocess.run()`.">
<text text-anchor="start" x="19" y="-254.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node2_13"><a xlink:href="Fuzzer.ipynb" xlink:title="run_process(self, inp: str = &#39;&#39;) &#45;&gt; subprocess.CompletedProcess:&#10;Run the program with `inp` as input.&#10;Return result of `subprocess.run()`.">
<text text-anchor="start" x="19" y="-242.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_process()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- OptionRunner&#45;&gt;ProgramRunner -->
<g id="edge1" class="edge">
<title>OptionRunner&#45;&gt;ProgramRunner</title>
<path fill="none" stroke="black" d="M58,-162.37C58,-183.62 58,-206.68 58,-225.72"/>
<polygon fill="none" stroke="black" points="54.5,-225.85 58,-235.85 61.5,-225.85 54.5,-225.85"/>
</g>
<!-- Runner -->
<g id="node3" class="node">
<title>Runner</title>
<g id="a_node3"><a xlink:href="Fuzzer.ipynb" xlink:title="class Runner:&#10;Base class for testing inputs.">
<polygon fill="none" stroke="black" points="19.5,-342.5 19.5,-436.5 96.5,-436.5 96.5,-342.5 19.5,-342.5"/>
<text text-anchor="start" x="35" y="-422.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Runner</text>
<polyline fill="none" stroke="black" points="19.5,-413.5 96.5,-413.5 "/>
<g id="a_node3_14"><a xlink:href="#" xlink:title="Runner">
<g id="a_node3_15"><a xlink:href="Fuzzer.ipynb" xlink:title="FAIL = &#39;FAIL&#39;">
<text text-anchor="start" x="28" y="-401" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">FAIL</text>
</a>
</g>
<g id="a_node3_16"><a xlink:href="Fuzzer.ipynb" xlink:title="PASS = &#39;PASS&#39;">
<text text-anchor="start" x="28" y="-390" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">PASS</text>
</a>
</g>
<g id="a_node3_17"><a xlink:href="Fuzzer.ipynb" xlink:title="UNRESOLVED = &#39;UNRESOLVED&#39;">
<text text-anchor="start" x="28" y="-379" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">UNRESOLVED</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="black" points="19.5,-372.5 96.5,-372.5 "/>
<g id="a_node3_18"><a xlink:href="#" xlink:title="Runner">
<g id="a_node3_19"><a xlink:href="Fuzzer.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Initialize">
<text text-anchor="start" x="28" y="-361.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node3_20"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, inp: str) &#45;&gt; Any:&#10;Run the runner with the given input">
<text text-anchor="start" x="28" y="-350.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">run()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProgramRunner&#45;&gt;Runner -->
<g id="edge2" class="edge">
<title>ProgramRunner&#45;&gt;Runner</title>
<path fill="none" stroke="black" d="M58,-300.09C58,-309.93 58,-321.14 58,-332.19"/>
<polygon fill="none" stroke="black" points="54.5,-332.26 58,-342.26 61.5,-332.26 54.5,-332.26"/>
</g>
<!-- OptionFuzzer -->
<g id="node4" class="node">
<title>OptionFuzzer</title>
<g id="a_node4"><a xlink:href="#" xlink:title="class OptionFuzzer:&#10;Fuzz a (Python) program using its arguments">
<polygon fill="none" stroke="black" points="172.5,-70.5 172.5,-123.5 271.5,-123.5 271.5,-70.5 172.5,-70.5"/>
<text text-anchor="start" x="180.5" y="-109.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">OptionFuzzer</text>
<polyline fill="none" stroke="black" points="172.5,-100.5 271.5,-100.5 "/>
<g id="a_node4_21"><a xlink:href="#" xlink:title="OptionFuzzer">
<g id="a_node4_22"><a xlink:href="#" xlink:title="__init__(self, runner: OptionRunner, *args, **kwargs):&#10;Constructor. `runner` is an OptionRunner.">
<text text-anchor="start" x="192" y="-89.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_23"><a xlink:href="#" xlink:title="run(self, runner=None, inp=&#39;&#39;):&#10;Run `runner` with fuzz input">
<text text-anchor="start" x="192" y="-78.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">run()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer -->
<g id="node5" class="node">
<title>GrammarCoverageFuzzer</title>
<g id="a_node5"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class GrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="135.5,-230.5 135.5,-305.5 308.5,-305.5 308.5,-230.5 135.5,-230.5"/>
<text text-anchor="start" x="143.5" y="-291.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="135.5,-282.5 308.5,-282.5 "/>
<g id="a_node5_24"><a xlink:href="#" xlink:title="GrammarCoverageFuzzer">
<g id="a_node5_25"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="_new_child_coverage(self, children: List[DerivationTree], max_depth: Union[int, float]) &#45;&gt; Set[str]">
<text text-anchor="start" x="153" y="-270.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_new_child_coverage()</text>
</a>
</g>
<g id="a_node5_26"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Choose an expansion of `node` among `children_alternatives`.&#10;Return `n` such that expanding `children_alternatives[n]`&#10;yields the highest additional coverage.">
<text text-anchor="start" x="153" y="-260.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node5_27"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="new_child_coverage(self, symbol: str, children: List[DerivationTree], max_depth: Union[int, float] = inf) &#45;&gt; Set[str]:&#10;Return new coverage that would be obtained&#10;by expanding (`symbol`, `children`)">
<text text-anchor="start" x="153" y="-248.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">new_child_coverage()</text>
</a>
</g>
<g id="a_node5_28"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="new_coverages(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; Optional[List[Set[str]]]:&#10;Return coverage to be obtained for each child at minimum depth">
<text text-anchor="start" x="153" y="-237.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">new_coverages()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- OptionFuzzer&#45;&gt;GrammarCoverageFuzzer -->
<g id="edge3" class="edge">
<title>OptionFuzzer&#45;&gt;GrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M222,-123.67C222,-149.22 222,-189.02 222,-220.2"/>
<polygon fill="none" stroke="black" points="218.5,-220.41 222,-230.41 225.5,-220.41 218.5,-220.41"/>
</g>
<!-- SimpleGrammarCoverageFuzzer -->
<g id="node6" class="node">
<title>SimpleGrammarCoverageFuzzer</title>
<g id="a_node6"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class SimpleGrammarCoverageFuzzer:&#10;When choosing expansions, prefer expansions not covered.">
<polygon fill="none" stroke="black" points="114.5,-357.5 114.5,-421.5 329.5,-421.5 329.5,-357.5 114.5,-357.5"/>
<text text-anchor="start" x="122.5" y="-407.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">SimpleGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="114.5,-398.5 329.5,-398.5 "/>
<g id="a_node6_29"><a xlink:href="#" xlink:title="SimpleGrammarCoverageFuzzer">
<g id="a_node6_30"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="choose_covered_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in _covered_ `children_alternatives`&#10;to be selected.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="123" y="-387" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_covered_node_expansion()</text>
</a>
</g>
<g id="a_node6_31"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;Picks uncovered expansions, if any.">
<text text-anchor="start" x="123" y="-376" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node6_32"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="choose_uncovered_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in _uncovered_ `children_alternatives`&#10;to be selected.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="123" y="-365" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_uncovered_node_expansion()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer -->
<g id="edge4" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M222,-305.5C222,-318.74 222,-333.78 222,-347.39"/>
<polygon fill="none" stroke="black" points="218.5,-347.46 222,-357.46 225.5,-347.46 218.5,-347.46"/>
</g>
<!-- TrackingGrammarCoverageFuzzer -->
<g id="node7" class="node">
<title>TrackingGrammarCoverageFuzzer</title>
<g id="a_node7"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class TrackingGrammarCoverageFuzzer:&#10;Track grammar coverage during production">
<polygon fill="none" stroke="black" points="108,-473.5 108,-592.5 336,-592.5 336,-473.5 108,-473.5"/>
<text text-anchor="start" x="116" y="-578.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">TrackingGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="108,-569.5 336,-569.5 "/>
<g id="a_node7_33"><a xlink:href="#" xlink:title="TrackingGrammarCoverageFuzzer">
<g id="a_node7_34"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="__init__(self, *args, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="138" y="-558.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node7_35"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="_max_expansion_coverage(self, symbol: str, max_depth: Union[int, float]) &#45;&gt; Set[str]">
<text text-anchor="start" x="138" y="-546.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_max_expansion_coverage()</text>
</a>
</g>
<g id="a_node7_36"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="add_coverage(self, symbol: str, new_child: Union[str, Tuple[str, Dict[str, Any]], List[DerivationTree]]) &#45;&gt; None">
<text text-anchor="start" x="138" y="-535.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_coverage()</text>
</a>
</g>
<g id="a_node7_37"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;&#39;children_alternatives`: a list of possible children for `node`.&#10;Defaults to random. To be overloaded in subclasses.">
<text text-anchor="start" x="138" y="-525.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node7_38"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="expansion_coverage(self) &#45;&gt; Set[str]:&#10;Return the set of covered expansions as strings SYMBOL &#45;&gt; EXPANSION">
<text text-anchor="start" x="138" y="-513.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expansion_coverage()</text>
</a>
</g>
<g id="a_node7_39"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="max_expansion_coverage(self, symbol: Optional[str] = None, max_depth: Union[int, float] = inf) &#45;&gt; Set[str]:&#10;Return set of all expansions in a grammar&#10;starting with `symbol` (default: start symbol).&#10;If `max_depth` is given, expand only to that depth.">
<text text-anchor="start" x="138" y="-502.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">max_expansion_coverage()</text>
</a>
</g>
<g id="a_node7_40"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="missing_expansion_coverage(self) &#45;&gt; Set[str]:&#10;Return expansions not covered yet">
<text text-anchor="start" x="138" y="-491.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">missing_expansion_coverage()</text>
</a>
</g>
<g id="a_node7_41"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="reset_coverage(self) &#45;&gt; None:&#10;Clear coverage info tracked so far">
<text text-anchor="start" x="138" y="-480.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">reset_coverage()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer -->
<g id="edge5" class="edge">
<title>SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M222,-421.55C222,-433.91 222,-448.66 222,-463.3"/>
<polygon fill="none" stroke="black" points="218.5,-463.38 222,-473.38 225.5,-463.38 218.5,-463.38"/>
</g>
<!-- GrammarFuzzer -->
<g id="node8" class="node">
<title>GrammarFuzzer</title>
<g id="a_node8"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="class GrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="132.5,-629.5 132.5,-913.5 311.5,-913.5 311.5,-629.5 132.5,-629.5"/>
<text text-anchor="start" x="172" y="-899.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarFuzzer</text>
<polyline fill="none" stroke="black" points="132.5,-890.5 311.5,-890.5 "/>
<g id="a_node8_42"><a xlink:href="#" xlink:title="GrammarFuzzer">
<g id="a_node8_43"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], start_symbol: str = &#39;&lt;start&gt;&#39;, min_nonterminals: int = 0, max_nonterminals: int = 10, disp: bool = False, log: Union[bool, int] = False) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="141" y="-879" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node8_44"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Produce a string from the grammar.">
<text text-anchor="start" x="141" y="-868" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node8_45"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="141" y="-857" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node8_46"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="any_possible_expansions(self, node: DerivationTree) &#45;&gt; bool">
<text text-anchor="start" x="141" y="-845" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">any_possible_expansions()</text>
</a>
</g>
<g id="a_node8_47"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="check_grammar(self) &#45;&gt; None:&#10;Check the grammar passed">
<text text-anchor="start" x="141" y="-834" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">check_grammar()</text>
</a>
</g>
<g id="a_node8_48"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;&#39;children_alternatives`: a list of possible children for `node`.&#10;Defaults to random. To be overloaded in subclasses.">
<text text-anchor="start" x="141" y="-824" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node8_49"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="choose_tree_expansion(self, tree: DerivationTree, children: List[DerivationTree]) &#45;&gt; int:&#10;Return index of subtree in `children` to be selected for expansion.&#10;Defaults to random.">
<text text-anchor="start" x="141" y="-812" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">choose_tree_expansion()</text>
</a>
</g>
<g id="a_node8_50"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node(self, node: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="141" y="-801" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node()</text>
</a>
</g>
<g id="a_node8_51"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_by_cost(self, node: DerivationTree, choose: Callable = &lt;built&#45;in function min&gt;) &#45;&gt; DerivationTree">
<text text-anchor="start" x="141" y="-790" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_by_cost()</text>
</a>
</g>
<g id="a_node8_52"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_max_cost(self, node: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="141" y="-779" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_max_cost()</text>
</a>
</g>
<g id="a_node8_53"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_min_cost(self, node: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="141" y="-768" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_min_cost()</text>
</a>
</g>
<g id="a_node8_54"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_randomly(self, node: DerivationTree) &#45;&gt; DerivationTree:&#10;Choose a random expansion for `node` and return it">
<text text-anchor="start" x="141" y="-757" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_randomly()</text>
</a>
</g>
<g id="a_node8_55"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree(self, tree: DerivationTree) &#45;&gt; DerivationTree:&#10;Expand `tree` in a three&#45;phase strategy until all expansions are complete.">
<text text-anchor="start" x="141" y="-746" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_tree()</text>
</a>
</g>
<g id="a_node8_56"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree_once(self, tree: DerivationTree) &#45;&gt; DerivationTree:&#10;Choose an unexpanded symbol in tree; expand it.&#10;Can be overloaded in subclasses.">
<text text-anchor="start" x="141" y="-736" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">expand_tree_once()</text>
</a>
</g>
<g id="a_node8_57"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree_with_strategy(self, tree: DerivationTree, expand_node_method: Callable, limit: Optional[int] = None):&#10;Expand tree using `expand_node_method` as node expansion function&#10;until the number of possible expansions reaches `limit`.">
<text text-anchor="start" x="141" y="-724" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_tree_with_strategy()</text>
</a>
</g>
<g id="a_node8_58"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expansion_cost(self, expansion: Expansion, seen: Set[str] = set()) &#45;&gt; Union[int, float]">
<text text-anchor="start" x="141" y="-713" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expansion_cost()</text>
</a>
</g>
<g id="a_node8_59"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expansion_to_children(self, expansion: Expansion) &#45;&gt; List[DerivationTree]">
<text text-anchor="start" x="141" y="-702" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expansion_to_children()</text>
</a>
</g>
<g id="a_node8_60"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="init_tree(self) &#45;&gt; DerivationTree">
<text text-anchor="start" x="141" y="-691" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">init_tree()</text>
</a>
</g>
<g id="a_node8_61"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="log_tree(self, tree: DerivationTree) &#45;&gt; None:&#10;Output a tree if self.log is set; if self.display is also set, show the tree structure">
<text text-anchor="start" x="141" y="-680" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">log_tree()</text>
</a>
</g>
<g id="a_node8_62"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="possible_expansions(self, node: DerivationTree) &#45;&gt; int">
<text text-anchor="start" x="141" y="-669" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">possible_expansions()</text>
</a>
</g>
<g id="a_node8_63"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="process_chosen_children(self, chosen_children: List[DerivationTree], expansion: Expansion) &#45;&gt; List[DerivationTree]:&#10;Process children after selection. &#160;By default, does nothing.">
<text text-anchor="start" x="141" y="-658" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">process_chosen_children()</text>
</a>
</g>
<g id="a_node8_64"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text text-anchor="start" x="141" y="-648" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
<g id="a_node8_65"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="symbol_cost(self, symbol: str, seen: Set[str] = set()) &#45;&gt; Union[int, float]">
<text text-anchor="start" x="141" y="-636" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">symbol_cost()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge6" class="edge">
<title>TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M222,-592.76C222,-601.1 222,-609.98 222,-619.14"/>
<polygon fill="none" stroke="black" points="218.5,-619.18 222,-629.18 225.5,-619.18 218.5,-619.18"/>
</g>
<!-- Fuzzer -->
<g id="node9" class="node">
<title>Fuzzer</title>
<g id="a_node9"><a xlink:href="Fuzzer.ipynb" xlink:title="class Fuzzer:&#10;Base class for fuzzers.">
<polygon fill="none" stroke="black" points="183.5,-950.5 183.5,-1025.5 260.5,-1025.5 260.5,-950.5 183.5,-950.5"/>
<text text-anchor="start" x="201" y="-1011.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Fuzzer</text>
<polyline fill="none" stroke="black" points="183.5,-1002.5 260.5,-1002.5 "/>
<g id="a_node9_66"><a xlink:href="#" xlink:title="Fuzzer">
<g id="a_node9_67"><a xlink:href="Fuzzer.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Constructor">
<text text-anchor="start" x="192" y="-991.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node9_68"><a xlink:href="Fuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Return fuzz input">
<text text-anchor="start" x="192" y="-980.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node9_69"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, runner: Fuzzer.Runner = &lt;Fuzzer.Runner object at 0x104ce9c10&gt;) &#45;&gt; Tuple[subprocess.CompletedProcess, str]:&#10;Run `runner` with fuzz input">
<text text-anchor="start" x="192" y="-969.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node9_70"><a xlink:href="Fuzzer.ipynb" xlink:title="runs(self, runner: Fuzzer.Runner = &lt;Fuzzer.PrintRunner object at 0x104ce93a0&gt;, trials: int = 10) &#45;&gt; List[Tuple[subprocess.CompletedProcess, str]]:&#10;Run `runner` with fuzz input, `trials` times">
<text text-anchor="start" x="192" y="-958.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">runs()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Fuzzer -->
<g id="edge7" class="edge">
<title>GrammarFuzzer&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M222,-913.78C222,-923.16 222,-932.15 222,-940.42"/>
<polygon fill="none" stroke="black" points="218.5,-940.49 222,-950.49 225.5,-940.49 218.5,-940.49"/>
</g>
<!-- OptionGrammarMiner -->
<g id="node10" class="node">
<title>OptionGrammarMiner</title>
<g id="a_node10"><a xlink:href="#" xlink:title="class OptionGrammarMiner:&#10;Helper class for extracting option grammars">
<polygon fill="none" stroke="black" points="290,-0.5 290,-193.5 444,-193.5 444,-0.5 290,-0.5"/>
<text text-anchor="start" x="298" y="-179.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">OptionGrammarMiner</text>
<polyline fill="none" stroke="black" points="290,-170.5 444,-170.5 "/>
<g id="a_node10_71"><a xlink:href="#" xlink:title="OptionGrammarMiner">
<g id="a_node10_72"><a xlink:href="#" xlink:title="ARGUMENTS_SYMBOL = &#39;&lt;arguments&gt;&#39;">
<text text-anchor="start" x="319" y="-158.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">ARGUMENTS_SYMBOL</text>
</a>
</g>
<g id="a_node10_73"><a xlink:href="#" xlink:title="OPTION_SYMBOL = &#39;&lt;option&gt;&#39;">
<text text-anchor="start" x="319" y="-147.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">OPTION_SYMBOL</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="black" points="290,-140.5 444,-140.5 "/>
<g id="a_node10_74"><a xlink:href="#" xlink:title="OptionGrammarMiner">
<g id="a_node10_75"><a xlink:href="#" xlink:title="__init__(self, function: Callable, log: bool = False):&#10;Constructor.&#10;`function` &#45; a function processing arguments using argparse()&#10;`log` &#45; output diagnostics if True">
<text text-anchor="start" x="310" y="-129.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node10_76"><a xlink:href="#" xlink:title="mine_ebnf_grammar(self):&#10;Extract EBNF option grammar">
<text text-anchor="start" x="310" y="-118.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">mine_ebnf_grammar()</text>
</a>
</g>
<g id="a_node10_77"><a xlink:href="#" xlink:title="mine_grammar(self):&#10;Extract BNF option grammar">
<text text-anchor="start" x="310" y="-107.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">mine_grammar()</text>
</a>
</g>
<g id="a_node10_78"><a xlink:href="#" xlink:title="add_group(self, locals, exclusive)">
<text text-anchor="start" x="310" y="-95.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_group()</text>
</a>
</g>
<g id="a_node10_79"><a xlink:href="#" xlink:title="add_int_rule(self)">
<text text-anchor="start" x="310" y="-84.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_int_rule()</text>
</a>
</g>
<g id="a_node10_80"><a xlink:href="#" xlink:title="add_metavar_rule(self, metavar, type_)">
<text text-anchor="start" x="310" y="-73.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_metavar_rule()</text>
</a>
</g>
<g id="a_node10_81"><a xlink:href="#" xlink:title="add_parameter(self, kwargs, metavar)">
<text text-anchor="start" x="310" y="-62.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_parameter()</text>
</a>
</g>
<g id="a_node10_82"><a xlink:href="#" xlink:title="add_str_rule(self)">
<text text-anchor="start" x="310" y="-51.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_str_rule()</text>
</a>
</g>
<g id="a_node10_83"><a xlink:href="#" xlink:title="add_type_rule(self, type_)">
<text text-anchor="start" x="310" y="-40.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_type_rule()</text>
</a>
</g>
<g id="a_node10_84"><a xlink:href="#" xlink:title="process_arg(self, arg, in_group, kwargs)">
<text text-anchor="start" x="310" y="-29.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">process_arg()</text>
</a>
</g>
<g id="a_node10_85"><a xlink:href="#" xlink:title="process_argument(self, locals, in_group)">
<text text-anchor="start" x="310" y="-18.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">process_argument()</text>
</a>
</g>
<g id="a_node10_86"><a xlink:href="#" xlink:title="traceit(self, frame, event, arg)">
<text text-anchor="start" x="310" y="-7.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">traceit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Legend -->
<g id="node11" class="node">
<title>Legend</title>
<text text-anchor="start" x="462" y="-114.5" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="10.00" fill="#b03a2e">Legend</text>
<text text-anchor="start" x="462" y="-104.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="468" y="-104.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="462" y="-94.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="468" y="-94.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="462" y="-84.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="468" y="-84.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="462" y="-75.3" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
