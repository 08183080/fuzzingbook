<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.49.3 (20211023.0002)
 -->
<!-- Pages: 1 -->
<svg width="302pt" height="596pt"
 viewBox="0.00 0.00 301.50 596.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 592)">
<g id="a_graph0"><a xlink:title="WebFormFuzzer class hierarchy">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-592 297.5,-592 297.5,4 -4,4"/>
</a>
</g>
<!-- WebFormFuzzer -->
<g id="node1" class="node">
<title>WebFormFuzzer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class WebFormFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="30.5,-90.5 30.5,-154.5 148.5,-154.5 148.5,-90.5 30.5,-90.5"/>
<text text-anchor="start" x="38.5" y="-140.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">WebFormFuzzer</text>
<polyline fill="none" stroke="black" points="30.5,-131.5 148.5,-131.5 "/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="WebFormFuzzer">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, url, **grammar_fuzzer_options):&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="50.5" y="-120" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="get_grammar(self, html_text)">
<text text-anchor="start" x="50.5" y="-108" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">get_grammar()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="get_html(self, url)">
<text text-anchor="start" x="50.5" y="-97" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">get_html()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer -->
<g id="node2" class="node">
<title>GrammarFuzzer</title>
<g id="a_node2"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="class GrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="0,-191.5 0,-475.5 179,-475.5 179,-191.5 0,-191.5"/>
<text text-anchor="start" x="39.5" y="-461.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarFuzzer</text>
<polyline fill="none" stroke="black" points="0,-452.5 179,-452.5 "/>
<g id="a_node2_4"><a xlink:href="#" xlink:title="GrammarFuzzer">
<g id="a_node2_5"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], start_symbol: str = &#39;&lt;start&gt;&#39;, min_nonterminals: int = 0, max_nonterminals: int = 10, disp: bool = False, log: Union[bool, int] = False) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="8.5" y="-441" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node2_6"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Produce a string from the grammar.">
<text text-anchor="start" x="8.5" y="-430" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node2_7"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="8.5" y="-419" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node2_8"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="any_possible_expansions(self, node: DerivationTree) &#45;&gt; bool">
<text text-anchor="start" x="8.5" y="-407" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">any_possible_expansions()</text>
</a>
</g>
<g id="a_node2_9"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="check_grammar(self) &#45;&gt; None:&#10;Check the grammar passed">
<text text-anchor="start" x="8.5" y="-396" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">check_grammar()</text>
</a>
</g>
<g id="a_node2_10"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;&#39;children_alternatives`: a list of possible children for `node`.&#10;Defaults to random. To be overloaded in subclasses.">
<text text-anchor="start" x="8.5" y="-386" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node2_11"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="choose_tree_expansion(self, tree: DerivationTree, children: List[DerivationTree]) &#45;&gt; int:&#10;Return index of subtree in `children` to be selected for expansion.&#10;Defaults to random.">
<text text-anchor="start" x="8.5" y="-374" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">choose_tree_expansion()</text>
</a>
</g>
<g id="a_node2_12"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node(self, node: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="8.5" y="-363" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node()</text>
</a>
</g>
<g id="a_node2_13"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_by_cost(self, node: DerivationTree, choose: Callable = &lt;built&#45;in function min&gt;) &#45;&gt; DerivationTree">
<text text-anchor="start" x="8.5" y="-352" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_by_cost()</text>
</a>
</g>
<g id="a_node2_14"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_max_cost(self, node: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="8.5" y="-341" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_max_cost()</text>
</a>
</g>
<g id="a_node2_15"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_min_cost(self, node: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="8.5" y="-330" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_min_cost()</text>
</a>
</g>
<g id="a_node2_16"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_randomly(self, node: DerivationTree) &#45;&gt; DerivationTree:&#10;Choose a random expansion for `node` and return it">
<text text-anchor="start" x="8.5" y="-319" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_node_randomly()</text>
</a>
</g>
<g id="a_node2_17"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree(self, tree: DerivationTree) &#45;&gt; DerivationTree:&#10;Expand `tree` in a three&#45;phase strategy until all expansions are complete.">
<text text-anchor="start" x="8.5" y="-308" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_tree()</text>
</a>
</g>
<g id="a_node2_18"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree_once(self, tree: DerivationTree) &#45;&gt; DerivationTree:&#10;Choose an unexpanded symbol in tree; expand it.&#10;Can be overloaded in subclasses.">
<text text-anchor="start" x="8.5" y="-298" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">expand_tree_once()</text>
</a>
</g>
<g id="a_node2_19"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree_with_strategy(self, tree: DerivationTree, expand_node_method: Callable, limit: Optional[int] = None):&#10;Expand tree using `expand_node_method` as node expansion function&#10;until the number of possible expansions reaches `limit`.">
<text text-anchor="start" x="8.5" y="-286" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_tree_with_strategy()</text>
</a>
</g>
<g id="a_node2_20"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expansion_cost(self, expansion: Expansion, seen: Set[str] = set()) &#45;&gt; Union[int, float]">
<text text-anchor="start" x="8.5" y="-275" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expansion_cost()</text>
</a>
</g>
<g id="a_node2_21"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expansion_to_children(self, expansion: Expansion) &#45;&gt; List[DerivationTree]">
<text text-anchor="start" x="8.5" y="-264" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expansion_to_children()</text>
</a>
</g>
<g id="a_node2_22"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="init_tree(self) &#45;&gt; DerivationTree">
<text text-anchor="start" x="8.5" y="-253" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">init_tree()</text>
</a>
</g>
<g id="a_node2_23"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="log_tree(self, tree: DerivationTree) &#45;&gt; None:&#10;Output a tree if self.log is set; if self.display is also set, show the tree structure">
<text text-anchor="start" x="8.5" y="-242" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">log_tree()</text>
</a>
</g>
<g id="a_node2_24"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="possible_expansions(self, node: DerivationTree) &#45;&gt; int">
<text text-anchor="start" x="8.5" y="-231" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">possible_expansions()</text>
</a>
</g>
<g id="a_node2_25"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="process_chosen_children(self, chosen_children: List[DerivationTree], expansion: Expansion) &#45;&gt; List[DerivationTree]:&#10;Process children after selection. &#160;By default, does nothing.">
<text text-anchor="start" x="8.5" y="-220" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">process_chosen_children()</text>
</a>
</g>
<g id="a_node2_26"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text text-anchor="start" x="8.5" y="-210" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
<g id="a_node2_27"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="symbol_cost(self, symbol: str, seen: Set[str] = set()) &#45;&gt; Union[int, float]">
<text text-anchor="start" x="8.5" y="-198" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">symbol_cost()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- WebFormFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge1" class="edge">
<title>WebFormFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M89.5,-154.79C89.5,-162.56 89.5,-171.43 89.5,-180.95"/>
<polygon fill="none" stroke="black" points="86,-181.09 89.5,-191.09 93,-181.09 86,-181.09"/>
</g>
<!-- Fuzzer -->
<g id="node3" class="node">
<title>Fuzzer</title>
<g id="a_node3"><a xlink:href="Fuzzer.ipynb" xlink:title="class Fuzzer:&#10;Base class for fuzzers.">
<polygon fill="none" stroke="black" points="51,-512.5 51,-587.5 128,-587.5 128,-512.5 51,-512.5"/>
<text text-anchor="start" x="68.5" y="-573.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Fuzzer</text>
<polyline fill="none" stroke="black" points="51,-564.5 128,-564.5 "/>
<g id="a_node3_28"><a xlink:href="#" xlink:title="Fuzzer">
<g id="a_node3_29"><a xlink:href="Fuzzer.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Constructor">
<text text-anchor="start" x="59.5" y="-553.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node3_30"><a xlink:href="Fuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Return fuzz input">
<text text-anchor="start" x="59.5" y="-542.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node3_31"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, runner: Fuzzer.Runner = &lt;Fuzzer.Runner object at 0x107bf8a00&gt;) &#45;&gt; Tuple[subprocess.CompletedProcess, str]:&#10;Run `runner` with fuzz input">
<text text-anchor="start" x="59.5" y="-531.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node3_32"><a xlink:href="Fuzzer.ipynb" xlink:title="runs(self, runner: Fuzzer.Runner = &lt;Fuzzer.PrintRunner object at 0x107bf8e50&gt;, trials: int = 10) &#45;&gt; List[Tuple[subprocess.CompletedProcess, str]]:&#10;Run `runner` with fuzz input, `trials` times">
<text text-anchor="start" x="59.5" y="-520.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">runs()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Fuzzer -->
<g id="edge2" class="edge">
<title>GrammarFuzzer&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M89.5,-475.78C89.5,-485.16 89.5,-494.15 89.5,-502.42"/>
<polygon fill="none" stroke="black" points="86,-502.49 89.5,-512.49 93,-502.49 86,-502.49"/>
</g>
<!-- SQLInjectionFuzzer -->
<g id="node4" class="node">
<title>SQLInjectionFuzzer</title>
<g id="a_node4"><a xlink:href="#" xlink:title="class SQLInjectionFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="21.5,-0.5 21.5,-53.5 157.5,-53.5 157.5,-0.5 21.5,-0.5"/>
<text text-anchor="start" x="29.5" y="-39.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">SQLInjectionFuzzer</text>
<polyline fill="none" stroke="black" points="21.5,-30.5 157.5,-30.5 "/>
<g id="a_node4_33"><a xlink:href="#" xlink:title="SQLInjectionFuzzer">
<g id="a_node4_34"><a xlink:href="#" xlink:title="__init__(self, url, sql_payload=&#39;&#39;, **kwargs):&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="50.5" y="-19.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_35"><a xlink:href="#" xlink:title="get_grammar(self, html_text)">
<text text-anchor="start" x="50.5" y="-8.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">get_grammar()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- SQLInjectionFuzzer&#45;&gt;WebFormFuzzer -->
<g id="edge3" class="edge">
<title>SQLInjectionFuzzer&#45;&gt;WebFormFuzzer</title>
<path fill="none" stroke="black" d="M89.5,-53.55C89.5,-61.8 89.5,-71.17 89.5,-80.25"/>
<polygon fill="none" stroke="black" points="86,-80.32 89.5,-90.32 93,-80.32 86,-80.32"/>
</g>
<!-- Legend -->
<g id="node5" class="node">
<title>Legend</title>
<text text-anchor="start" x="175.5" y="-44.5" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="10.00" fill="#b03a2e">Legend</text>
<text text-anchor="start" x="175.5" y="-34.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="181.5" y="-34.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="175.5" y="-24.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="181.5" y="-24.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="175.5" y="-14.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="181.5" y="-14.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="175.5" y="-5.3" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
